package com.geekbing.middle;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

/**
 * @author bing
 */
public class LeetCode5534 {
    public int visiblePoints(List<List<Integer>> points, int angle, List<Integer> location) {
        // 统计相同点个数
        long same = points.stream().filter(point -> point.get(0).equals(location.get(0)) && point.get(1).equals(location.get(1))).count();
        points = points.stream().filter(point -> !point.get(0).equals(location.get(0)) || !point.get(1).equals(location.get(1))).collect(Collectors.toList());

        // 按照相对于location的角度从小到大排序
        List<List<Integer>> sortPoints = points.stream().sorted(Comparator.comparingDouble(p -> calAngle(location, p))).collect(Collectors.toList());
        // 计算所有点相对于location的角度
        List<Double> angles = calAngles(sortPoints, location);

        int left = 0, right = 0, max = 0;
        while (left <= right && right < angles.size()) {
            if (points.get(right).get(0).equals(location.get(0)) && points.get(right).get(1).equals(location.get(1))) {
                same++;
            }
            double angleDiff = calAngleDiff(angles.get(left), angles.get(right));
            if (angleDiff <= angle) {
                max = Math.max(right - left + 1, max);
                right++;
            } else {
                while (left <= right) {
                    angleDiff = calAngleDiff(angles.get(left), angles.get(right));
                    if (angleDiff > angle) {
                        left++;
                    } else {
                        break;
                    }
                }
            }
        }
        return max + (int) same;
    }

    private double calAngleDiff(double angle1, double angle2) {
        if (angle1 == 0) {
            return Math.abs(angle2);
        }
        if (angle2 == 0) {
            return Math.abs(angle1);
        }
        if ((angle1 > 90 && angle2 < -90) || (angle1 < -90 && angle2 > 90)) {
            return 360 - Math.abs(angle1) - Math.abs(angle2);
        }
        double diff = Math.abs(angle1 - angle2);
        if (diff > 180) {
            return diff - 180;
        }
        return diff;
    }

    private List<Double> calAngles(List<List<Integer>> sortPoints, List<Integer> location) {
        List<Double> angles = new ArrayList<>();
        for (List<Integer> point : sortPoints) {
            angles.add(calAngle(location, point));
        }
        return angles;
    }

    private double calAngle(List<Integer> location, List<Integer> point) {
        double y = point.get(1) - location.get(1);
        double x = point.get(0) - location.get(0);
        if (x == 0 && y == 0) {
            return 0;
        } else if (x == 0 && y > 0) {
            return 90;
        } else if (x == 0 && y < 0) {
            return -90;
        } else if (y == 0 && x > 0) {
            return 0;
        } else if (y == 0 && x < 0) {
            return 180;
        } else if (x > 0 && y > 0) {
            return Math.atan2(y, x) * 180 / Math.PI;
        } else if (x > 0 && y < 0) {
            return -Math.atan2(-y, x) * 180 / Math.PI;
        } else if (x < 0 && y > 0) {
            return 180 - Math.atan2(y, -x) * 180 / Math.PI;
        } else {
            return -180 + Math.atan2(-y, -x) * 180 / Math.PI;
        }
    }

    public static void main(String[] args) {
        LeetCode5534 leetCode5534 = new LeetCode5534();

        List<List<Integer>> points1 = new ArrayList<>();
        points1.add(new ArrayList<>(Arrays.asList(2, 1)));
        points1.add(new ArrayList<>(Arrays.asList(2, 2)));
        points1.add(new ArrayList<>(Arrays.asList(3, 3)));
        System.out.println(leetCode5534.visiblePoints(points1, 90, new ArrayList<>(Arrays.asList(1, 1))));

        List<List<Integer>> points2 = new ArrayList<>();
        points2.add(new ArrayList<>(Arrays.asList(2, 1)));
        points2.add(new ArrayList<>(Arrays.asList(2, 2)));
        points2.add(new ArrayList<>(Arrays.asList(3, 4)));
        points2.add(new ArrayList<>(Arrays.asList(1, 1)));
        System.out.println(leetCode5534.visiblePoints(points2, 90, new ArrayList<>(Arrays.asList(1, 1))));

        List<List<Integer>> points3 = new ArrayList<>();
        points3.add(new ArrayList<>(Arrays.asList(0, 1)));
        points3.add(new ArrayList<>(Arrays.asList(2, 1)));
        System.out.println(leetCode5534.visiblePoints(points3, 13, new ArrayList<>(Arrays.asList(1, 1))));

        List<List<Integer>> points4 = new ArrayList<>();
        points4.add(new ArrayList<>(Arrays.asList(1, 1)));
        points4.add(new ArrayList<>(Arrays.asList(2, 2)));
        points4.add(new ArrayList<>(Arrays.asList(3, 3)));
        points4.add(new ArrayList<>(Arrays.asList(4, 4)));
        points4.add(new ArrayList<>(Arrays.asList(1, 2)));
        points4.add(new ArrayList<>(Arrays.asList(2, 1)));
        System.out.println(leetCode5534.visiblePoints(points4, 0, new ArrayList<>(Arrays.asList(1, 1))));

        int[][] p = new int[][]{{181057, 434057}, {531447, 610066}, {317902, 405271}, {631993, 589117}, {291193, 691585}, {852777, 542041}, {613648, 553900}, {334272, 856568}, {323297, 269982}, {533491, 684357}, {364514, 158301}, {257132, 564938}, {535538, 889116}, {513302, 786477}, {228323, 513437}, {437154, 833033}, {328729, 619673}, {166684, 541377}, {194533, 589580}, {112363, 254416}, {793958, 616994}, {290775, 381971}, {472159, 241094}, {759225, 318100}, {409661, 720022}, {229141, 333167}, {790988, 633987}, {381444, 445356}, {598112, 135341}, {103448, 894890}, {628719, 327330}, {678659, 853045}, {681188, 450527}, {480700, 490334}, {600964, 302803}, {548555, 343136}, {813946, 246298}, {570310, 423686}, {387855, 740741}, {759409, 722180}, {780135, 595930}, {511694, 106362}, {797403, 251869}, {507302, 288708}, {607840, 453234}, {393227, 770052}, {545208, 138293}, {294899, 195432}, {341165, 466817}, {894768, 350383}, {854618, 630780}, {826788, 454089}, {132387, 518234}, {749536, 711204}, {808583, 697912}, {180076, 797105}, {596327, 746057}, {690306, 432961}, {193109, 743399}, {261882, 669900}, {539502, 784560}, {480807, 346765}, {131523, 810321}, {639934, 815562}, {670335, 126528}, {810652, 553243}, {615245, 515357}, {216557, 647165}, {511225, 826602}, {557008, 491176}, {196874, 679436}, {696376, 472093}, {654728, 632086}, {846240, 433264}, {816244, 185040}, {164066, 454721}, {214853, 400243}, {794705, 343359}, {668738, 886399}, {198754, 172487}, {234733, 730952}, {555804, 332012}, {750314, 378625}, {398402, 746037}, {140190, 753736}, {723986, 189262}, {859860, 680183}, {491022, 442553}, {746892, 390696}, {823837, 194292}, {743364, 671168}, {820566, 866629}, {606962, 220349}, {438414, 770140}, {130381, 304844}, {648059, 169681}, {551235, 599955}, {435287, 634254}, {325522, 404607}, {147668, 307290}, {492723, 388698}, {488624, 693007}, {684323, 527101}, {169839, 676437}, {698609, 500428}, {575930, 846473}, {387916, 637538}, {681937, 183443}, {423426, 754389}, {250824, 820019}, {367272, 825271}, {102424, 377868}, {288954, 446072}, {685339, 450654}, {688587, 712622}, {646603, 864251}, {843824, 166924}, {805864, 620210}, {489552, 867415}, {827507, 312715}, {166417, 759755}, {835443, 578405}, {603447, 415448}, {405429, 703575}, {244819, 765017}, {609317, 646035}, {392984, 371170}, {166704, 193681}, {417600, 676672}, {139497, 649125}, {571385, 610130}, {385363, 495280}, {350083, 777153}, {506001, 139235}, {408131, 677828}, {379760, 224895}, {634207, 840516}, {398006, 309768}, {727813, 164751}, {245683, 572340}, {637873, 108859}, {631386, 773661}, {280787, 493893}, {272553, 127643}, {428304, 862495}, {265085, 251237}, {385306, 519109}, {121618, 331907}, {761150, 212497}, {890376, 717548}, {462300, 332105}, {517210, 114204}, {497908, 260923}, {629175, 822645}, {185227, 288126}, {541670, 487795}, {402568, 378817}, {299892, 318797}, {457635, 655770}, {489888, 564459}, {822611, 691428}, {343225, 506837}, {860360, 452978}, {705647, 244995}, {224901, 484919}, {778362, 329846}, {354410, 769414}, {782337, 697595}, {595280, 723194}, {733455, 297093}, {872535, 613057}, {208944, 852905}, {215441, 526568}, {708192, 717848}, {142964, 395235}, {229735, 788307}, {175501, 556791}, {843328, 456612}, {469886, 606060}, {836197, 568450}, {255973, 221328}, {780740, 823530}, {892132, 604424}, {332866, 714617}, {740200, 748889}, {438181, 476932}, {156116, 700059}, {638151, 223430}, {298223, 513158}, {437647, 493530}, {639899, 145249}, {797199, 322055}, {585398, 622249}, {331708, 869647}, {198022, 213249}, {720932, 258133}, {658721, 245523}, {639990, 419019}, {720304, 199375}, {669404, 730920}, {612960, 503958}, {659991, 199005}, {591389, 204621}, {491942, 270653}, {652041, 551417}, {888212, 453070}, {832148, 318999}, {437276, 258358}, {125359, 815870}, {886222, 770714}, {515518, 755455}, {846004, 733499}, {269535, 627867}, {432756, 365520}, {773911, 360279}, {292509, 748496}, {807135, 462797}, {262761, 412412}, {851605, 183658}, {504884, 683824}, {520817, 646976}, {604399, 776808}, {888903, 187105}, {847249, 856008}, {292346, 587054}, {461202, 289712}, {276108, 365876}, {267660, 210472}, {161327, 509903}, {894004, 382953}, {497235, 160473}, {750247, 455310}, {565775, 488407}, {525950, 856921}, {736364, 735402}, {160227, 402609}, {187891, 151490}, {461438, 651328}, {392940, 858056}, {329194, 670485}, {374490, 825843}, {739546, 395078}, {882410, 626190}, {555070, 775494}, {255324, 241506}, {399787, 605312}, {477723, 497990}, {300179, 213068}, {323869, 407335}, {809393, 592634}, {537533, 628847}, {532239, 809957}, {197885, 846473}, {567956, 862487}, {301346, 581355}, {689617, 288335}, {422308, 715270}, {354748, 783329}, {650158, 456946}, {152595, 329267}, {840848, 198406}, {860463, 267844}, {207800, 470479}, {878698, 685938}, {660856, 262425}, {422774, 498074}, {860338, 605968}, {722957, 412901}, {823806, 835503}, {552081, 748574}, {150733, 575824}, {308202, 384918}, {382643, 309258}, {529784, 289408}, {487938, 397144}, {835907, 148335}, {261033, 160690}, {607903, 880862}, {363657, 243915}, {734022, 202614}, {899677, 877162}, {472987, 536684}, {766396, 286660}, {401381, 732890}, {701630, 494313}, {151647, 465299}, {400066, 671232}, {288808, 610913}, {562153, 802298}, {640404, 307761}, {781314, 302453}, {104839, 803719}, {336364, 816204}, {863555, 724683}, {816313, 627338}, {244244, 775635}, {147701, 365464}, {700218, 736575}, {277423, 483836}, {252228, 165777}, {392391, 885083}, {541544, 557468}, {194470, 458489}, {213608, 765122}, {265966, 331972}, {729946, 283489}, {263426, 580214}, {498790, 527201}, {339650, 203133}, {493208, 769093}, {862645, 389694}, {380475, 573319}, {209219, 679627}, {647153, 490973}, {569811, 241098}, {218781, 868920}, {802468, 126064}, {680185, 885190}, {650572, 494819}, {543106, 746702}, {537924, 785561}, {653478, 415690}, {472193, 866326}, {634046, 627139}, {758984, 840861}, {296549, 375991}, {438103, 388869}, {826123, 203810}, {793965, 515697}, {427946, 255967}, {476045, 107061}, {746983, 447418}, {128467, 151191}, {675813, 852558}, {425423, 879570}, {220329, 466025}, {162306, 645580}, {885141, 625011}, {317395, 513179}, {888243, 575998}, {234489, 634903}, {354358, 791240}, {773757, 162764}, {558307, 514709}, {782170, 521279}, {654377, 524988}, {133936, 657111}, {443485, 347477}, {376850, 812105}, {526522, 168243}, {819465, 729242}, {121926, 737523}, {514115, 565298}, {245752, 122511}, {666170, 232280}, {233927, 190789}, {151694, 145408}, {628530, 313963}, {738812, 570500}, {781055, 140148}, {770616, 499388}, {178464, 834036}, {432303, 452884}, {651420, 753018}, {849542, 627280}, {174431, 384320}, {549708, 621008}, {490593, 591504}, {458160, 701682}, {123891, 675428}, {302729, 505941}, {383261, 653111}, {176247, 173326}, {564331, 153157}, {449000, 279124}, {781434, 250323}, {678596, 676188}, {164276, 650427}, {256290, 462254}, {103169, 280760}, {491732, 195174}, {780106, 202699}, {383885, 188852}, {849716, 290611}, {195945, 103873}, {574874, 519902}, {733689, 201196}, {153544, 536499}, {794596, 275501}, {133652, 115462}, {674410, 858790}, {173984, 639935}, {712264, 476882}, {637592, 245210}, {784897, 798570}, {879151, 551912}, {853248, 173623}, {794208, 315430}, {257348, 839877}, {723509, 448768}, {312143, 483854}, {544940, 857797}, {832105, 667116}, {532160, 715351}, {374496, 479687}, {801396, 202775}, {614252, 782479}, {588788, 830300}, {875092, 353915}, {359966, 566630}, {891775, 111734}, {404492, 106440}, {692638, 749549}, {296176, 880934}, {296138, 895359}, {125576, 286954}, {517969, 742911}, {603762, 677633}, {724165, 363627}, {444938, 694172}, {203130, 311932}, {533963, 504347}, {338099, 628036}, {577057, 335367}, {786672, 192952}, {607941, 774972}, {528359, 734572}, {588659, 355725}, {490487, 531096}, {214053, 282184}, {517242, 774051}, {215320, 708055}, {261837, 547140}, {874695, 273044}, {680116, 230227}, {274411, 405540}, {747563, 435520}, {157038, 387190}, {520126, 182647}, {109054, 507161}, {609869, 657637}, {363676, 701949}, {264430, 557687}, {389211, 305691}, {162659, 651582}, {505098, 283603}, {871679, 676171}, {350520, 738233}, {144088, 604934}, {517506, 776069}, {782167, 696054}, {487637, 164370}, {780041, 707614}, {506159, 294921}, {318124, 881605}, {236878, 177698}, {245596, 207766}, {391178, 323460}, {564985, 198657}, {770318, 190798}, {590190, 586574}, {815635, 800871}, {569561, 784257}, {137998, 257437}, {718518, 533996}, {255363, 495540}, {394704, 867642}, {212429, 404012}, {552982, 127967}, {599605, 290152}, {350196, 450346}, {406476, 503494}, {361836, 588620}};
        List<List<Integer>> points = new ArrayList<>();
        for (int[] ints : p) {
            points.add(new ArrayList<>(Arrays.asList(ints[0], ints[1])));
        }
        System.out.println(leetCode5534.visiblePoints(points, 43, new ArrayList<>(Arrays.asList(817167, 652596))));
    }

    private static void printRelative(List<List<Integer>> points, List<Integer> location) {
        for (List<Integer> point : points) {
            System.out.println("x: " + (point.get(0) - location.get(0)) + ", y: " + (point.get(1) - location.get(1)));
        }
    }
}
